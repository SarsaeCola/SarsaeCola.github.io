{"pages":[],"posts":[{"title":"MySql特别知识点","text":"基础 别名 使用AS SElECT 100/2 AS 结果; 去重 使用DISTICT SELECT DISTINCT department_id FROM employees; \"+\"与\"concat()\"的差别 \"+\":只能用于数值型数据的加法运算或者数值字符串与数值型数据的加法运算. \"concat\": 拼接字符串作为一个字符串。null与任何字符拼接都是null //\"+\" SELECT 100+2 AS 结果; **结果** 102 //\"contat()\" SELECT CONCAT(last_name,first_name) AS别名 FROM employees; **别名** JackyChen 梓良黄 模糊查询通配符 *!!!不能通配NULL，NULL与‘’是不同的 \"%\":匹配任意多个字符 \"_\":匹配任意一个字符,匹配“_”时要转义 \"ESCAPE\":标注后面的第一个通配符转义其余不转义， ex: 转义前：select * from user where username like '_nihao', 转义后：select * from user where username like '/_nihao' escape '/',意思就是说/之后的_不作为通配符 NULL 判断是不是NULL不能用\"=\"，要用IS NULL或者安全等于\"\" SELCET * FROM table_name WHERE cloumn_name IS[] NULL","link":"/2020/06/26/MySql%E7%89%B9%E5%88%AB%E7%9F%A5%E8%AF%86%E7%82%B9/"},{"title":"Mysql分组查询","text":"基本语法123456SELECT 分组函数，列（要求出现在group by的后面）FROM 表[WHERE 分组前的筛选条件]GROUP BY 分组的列(多选)[HAVING 分组后的筛选条件][ORDER BY 子句] 案例1 查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资 12345SELECT MAX(salary),job_idFROM employeesWHERE commission_pct IS NOT NULLGROUP BY job_idHAVING MAX(salary)&gt;12000; 案例2 查询每个部门每个工种的员工的平均工资，并且按照平均工资的高低显示 SELECT AVG(salary) a,department_id,job_id FROM employees WHERE department_id IS NOT NULL GROUP BY job_id,department_id ORDER BY a DESC;","link":"/2020/07/11/Mysql%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/"},{"title":"Mysql子查询","text":"含义：出现在其它语句中的select语句，称为子查询或内查询，；外部的查询语句，称为主查询或外查询。 特点 子查询放在小括号内 子查询一般放在条件的右侧 标量子查询一般搭配着单行操作符使用：&gt; &lt; &gt;= &lt;= = &lt;&gt; 列子查询一般搭配多行操作符使用：in，any/some，all 子查询的执行优先于主查询执行分类按子查询出现的位置： SELECT后面（仅仅支持标量子查询） FROM后面（支持表子查询） WHERE或HAVING后面（支持标量子查询，列子查询，行子查询） EXISTS后面（相关子查询）（支持表子查询）按结果集的行列数不同： 标量子查询（结果集只有一行一列） 列子查询（结果集有一列多行） 行子查询（结果集有一行多列或多行多列） 表子查询（结果集有多行多列） where和having后面 标量子查询1234567#查询谁的工资比Abel高SELECT *FROM employeesWHERE salary&gt;( SELECT salary FROM employees WHERE last_name='Abel'); 列子查询 操作符 含义 IN/NOT IN 等于列表中的任意一个 ANY/SOME 和子查询返回的某一个值比较 ALL 和子查询返回的所有值比较 123456789101112131415#返回location_id是1400或1700的部门中的所有员工的姓名SELECT last_nameFROM department_id IN( SELECT department_id FROM departments WHERE location_id IN (1400,1700));#返回其它部门中比job_id以为‘IT_PROG’部门任一工资低的员工的信息SELECT ＊FROM employeesWHERE salary&lt;ANY( SELECT DISTINCT salary FROM employees WHERE job_id='IT_PROG') AND job_id&lt;&gt;'IT_PROG'; 行子查询123456SELECT *FROM employeesWHERE (employees_id,salary)=( SELECT MIN(emplyees_id),MAX(salary) FROM employees); 在select后面1234567#查询每个部门的员工的个数SELECT d.*,( SELECT COUNT(*) FROM employees e WHERE e.department_id=d.`department_id`) 个数FROM departments d; from后面返回的是一张表，使用时要起别名 123456789#查询每个部门的平均工资的工资等级SELECT ag_dep.*,g.`grade_level`FROM( SELECT AVG(salary) ag,department_id FROM employees GROUP BY department_id) ag_depINNER JOIN job_grades gON ag_dep.ag BETWEEN lowest_sal AND highest_sal; exists后面（相关子查询）根据是否存在，返回0/1（存在1，不存在0） 12345678#查询有员工的部门名SELECT deparment_nameFROM department dWHERE EXISTS( SELECT * FROM employees e WHERE d.'department_id`=e.`deparment_id`);","link":"/2020/07/16/Mysql%E5%AD%90%E6%9F%A5%E8%AF%A2/"},{"title":"Mysql常用函数","text":"单行函数字符函数 length函数 用于获取值的字节长度，具体要看使用的字符集SELECT(‘John’)/SELECT(‘张三丰haha’) concat函数 用于拼接字符串SELECT CONCAT(last_name,’_’,first_name) 姓名 from employee upper/lower函数 将英文字符转变成大写或者小写UPPER(last_name) substr,substring函数(有多种重载类型) 索引从1开始SUBSTR(str,pos),从pos出截取到字符串尾部SUBSTR(str,pos,len)，从pos处截取指定长度的字串 instr函数 instr(str,substr)返回substr在str中的起始索引,找不到则返回0 trim函数 TRIM(str)去掉字符串的前后空格TRIM(char FROM str)去掉str前后的指定的字符char，如SELECT TRIM(‘a’ FROM ‘aaaaaxxxaaayyyaaaa’) 结果是’xxxaaayyy’如果char是’aa’则结果是’axxxaaayyy’ lpad函数 lpad(str,len,char)用指定字符左填充字符串到指定长度，并返回指定长度的字串，指定长度小于原字串则会实现截取效果。 replace函数 replace(str,substr1,substr2)用substr2替换str中全部的substr1 数学函数 round函数 round(X)四舍五入到个位round(X,D)四舍五入到小数点后第D位 ceil函数/floor函数 ceil（X）向上取整/floor(X)向下取整 truncate函数 truancate(X,D)截断小数点后指定位数truncate（1.6999，1）返回1.6 mod函数 MOD（X，D）取余 rand函数 返回0~1之间的随机小数. 日期函数 序号 格式符 功能 1 %Y 四位的年份 2 %y 2位的年份 3 %m 月份（01,02,..11,12) 4 %c 月份（1,2,..11,12) 5 %d 日（01,02…） 6 %H 小时（24小时制） 7 %h 小时（12小时制） 8 %i 分钟(00,01,…59) 9 %s 秒(00,01,..59) now函数 now()返回当前系统日期+时间 curdate函数 curdate()返回当前系统日期，不包含时间 curtime函数 curtime()返回当前时间，不包含日期 year，month，day，hour，minute，second 可以获取指定的部分，年月日。。。 str_to_date函数 解析日期字符串，返回标准格式的日期STR_TO_DATE(‘9-13-1999’,’%m-%d-%Y’) 1999-09-13 format_date函数 将日期转化为指定格式的字符串DATE_FORMAT(NOW(),%y年%m月%d日) datediff函数 datediff(expr1,expr2)比较两日期之间相差的天数，参数是两个标准格式的日期。 其他函数 VERSION()返回当前数据库版本 DATABASE()返回当前数据库 USER()返回当前用户流程控制函数 if函数 SELECT IF(expr,expr2,expr3)如果expr1为真则返回expr2，否则返回expr3 case函数 效果一：switch caseCASE 要判断的字段或表达式WHEN 常量1 THEN 要显示的值1或语句1WHEN 常量2 THEN 要显示的值2或语句2…ELSE 要显示的值n或者语句nEND效果二：类似于多重ifCASEWHEN 条件1 THEN 要显示的值1或语句1WHEN 条件2 THEN 要显示的值2或语句2…ELSE 要显示的值n或语句nEND 分组函数 sum函数 求和，统计，忽略null值 avg函数 求平均值，忽略null值 max函数 求最大值，忽略null值 min函数 求最小值，忽略null值 count函数 求个数 ，忽略null值","link":"/2020/07/10/Mysql%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"},{"title":"Mysql连接查询","text":"含义:连接查询又称多表查询，当查询的字段来自于多个表时，就会用到连接查询内连接（inner join）：取出两张表中匹配到的数据，匹配不到的不保留外连接（outer join）：取出连接表中匹配到的数据，匹配不到的也会保留，其值为NULL 内连接 等值连接等值连接（连接条件中的运算符为“=”）举例： 12SELECT * FROM Student,SC WHERE (Student.Sno=SC.Sno); 非等值连接连接条件中的运算符不是“=”举例： 123SELECT salary,grade_levelFROM employees e,job_grade gWHERE salary BETWEEN g.`lowest_sal` AND g.`highest_sal`; 自连接表本身和自己连接举例： 123SELECT e.employee_id,e.last_name,m.employee_id,m.last_nameFROM employees e,employees mWHERE e.`manager_id`=m.`employee_id`; 自然连接（在等值连接中去除重复的属性列）举例： 123SELECT student.sno,sname,cno,gradeFROM Student,SC WHERE (Student.Sno=SC.Sno); 外连接语法： 12345678SELECT 查询列表FROM 表1 别名 [连接类型]JOIN 表2 别名ON 连接条件[WHERE 筛选条件][GROUP BY 分组][HAVING 筛选条件][ORDER BY 排序] 左外连接(LEFT [OUTER]) 右外连接(RIGHT [OUTER]) 全外连接(FULL [OUTER])关键字：union /union all 语句：(select colum1,colum2…columN from tableA ) union (select colum1,colum2…columN from tableB ) 或 (select colum1,colum2…columN from tableA ) union all (select colum1,colum2…columN from tableB )； union语句注意事项： 1.通过union连接的SQL它们分别单独取出的列数必须相同； 2.不要求合并的表列名称相同时，以第一个sql 表列名为准； 3.使用union 时，完全相等的行，将会被合并，由于合并比较耗时，一般不直接使用 union 进行合并，而是通常采用union all 进行合并； 4.被union 连接的sql 子句，单个子句中不用写order by ，因为不会有排序的效果。但可以对最终的结果集进行排序； (select id,name from A order by id) union all (select id,name from B order by id); //没有排序效果 (select id,name from A ) union all (select id,name from B ) order by id; //有排序效果 交叉连接交叉连接返回的结果，是被连接的两个表中所有数据行的笛卡尔积，也就是返回第一个表中符合查询条件的数据行数，乘以第二个表中符合查询条件的数据行数CROSS JOIN，用于连接两个要查询的表，通过该语句，可以查询两个表中所有的数据组合","link":"/2020/07/11/Mysql%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/"},{"title":"git基本使用","text":"一、新建代码库# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url] 二、配置Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。# 显示当前的Git配置$ git config –list# 编辑Git配置文件$ git config -e [–global]# 设置提交代码时的用户信息$ git config [–global] user.name “[name]”$ git config [–global] user.email “[email address]” 三、增加/删除文件# 添加指定文件到暂存区$ git add [file1] [file2] …# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] …# 停止追踪指定文件，但该文件会保留在工作区$ git rm –cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 四、代码提交# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] … -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit –amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit –amend [file1] [file2] … 五、分支# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch –track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch –set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin –delete [branch-name]$ git branch -dr [remote/branch] 六、标签# 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] –tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag] 七、查看信息# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log –stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD –pretty=format:%s# 显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件$ git log [tag] HEAD –grep feature# 显示某个文件的版本历史，包括文件改名$ git log –follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 –pretty –oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff –cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]…[second-branch]# 显示今天你写了多少行代码$ git diff –shortstat “@{0 day ago}”# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show –name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog 八、远程同步# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] –force# 推送所有分支到远程仓库$ git push [remote] –all 九、撤销# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset –hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset –hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset –keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop 十、其他# 生成一个可供发布的压缩包$ git archive","link":"/2020/06/22/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"git","slug":"git","link":"/tags/git/"}],"categories":[{"name":"SQL","slug":"SQL","link":"/categories/SQL/"},{"name":"git命令","slug":"git命令","link":"/categories/git%E5%91%BD%E4%BB%A4/"}]}